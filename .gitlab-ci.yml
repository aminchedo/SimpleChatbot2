stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  DOCKER_IMAGE_LATEST: $CI_REGISTRY_IMAGE:latest

# Services
services:
  - docker:dind

before_script:
  - docker info
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# Test stage
test:
  stage: test
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci
    - npm run test --if-present
    - cd ../backend
    - npm ci
    - npm run test --if-present
  only:
    - merge_requests
    - main
    - develop

# Build stage
build:
  stage: build
  image: docker:latest
  script:
    - docker build -t $DOCKER_IMAGE_TAG .
    - docker tag $DOCKER_IMAGE_TAG $DOCKER_IMAGE_LATEST
    - docker push $DOCKER_IMAGE_TAG
    - docker push $DOCKER_IMAGE_LATEST
  only:
    - main
    - develop

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_SERVER >> ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_SERVER "
        cd $STAGING_PATH &&
        docker-compose pull &&
        docker-compose down &&
        docker-compose up -d"
  environment:
    name: staging
    url: $STAGING_URL
  only:
    - develop

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  script:
    - ssh $PRODUCTION_USER@$PRODUCTION_SERVER "
        cd $PRODUCTION_PATH &&
        docker-compose -f docker-compose.production.yml pull &&
        docker-compose -f docker-compose.production.yml down &&
        docker-compose -f docker-compose.production.yml up -d"
  environment:
    name: production
    url: $PRODUCTION_URL
  when: manual
  only:
    - main